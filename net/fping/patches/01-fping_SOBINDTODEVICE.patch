commit 22ac493d738c7648adaffdab79a325ae068668bc
Author: Henrique de Moraes Holschuh <henrique@nic.br>
Date:   Mon Aug 24 20:00:53 2020 -0300

    fping: retain privileges until after privileged setsockopt
    
    On Linux, one needs privileges to setsockopt(SO_BINDTODEVICE), and the
    current code would drop setuid root privileges too soon.
    
    Temporarily drop privileges instead, and raise them back to issue the
    privileged setsockopt().  Once we know we won't need to do any further
    privileged setsockopt(), permanently drop privileges.
    
    For now, assume SO_BINDTODEVICE is the only setsockopt that needs this.

diff --git a/src/fping.c b/src/fping.c
index 4a0c60a..405b4d3 100644
--- a/src/fping.c
+++ b/src/fping.c
@@ -329,6 +329,42 @@ int addr_cmp(struct sockaddr* a, struct sockaddr* b);
 
 /*** function definitions ***/
 
+/************************************************************
+
+  Function: p_setsockopt
+
+*************************************************************
+
+  Inputs:  p_uid: privileged uid. Others as per setsockopt(2)
+
+  Description:
+
+  Elevates privileges to p_uid when required, calls
+  setsockopt, and drops privileges back.
+
+************************************************************/
+
+int p_setsockopt(uid_t p_uid, int sockfd, int level, int optname,
+	const void *optval, socklen_t optlen)
+{
+    const uid_t saved_uid = geteuid();
+    int res;
+
+    if (p_uid != saved_uid && seteuid(p_uid)) {
+	perror("cannot elevate privileges for setsockopt");
+    }
+
+    res = setsockopt(sockfd, level, optname, optval, optlen);
+
+    if (p_uid != saved_uid && seteuid(saved_uid)) {
+	perror("fatal error: could not drop privileges after setsockopt");
+	/* continuing would be a security hole */
+	exit(4);
+    }
+
+    return res;
+}
+
 /************************************************************
 
   Function: main
@@ -347,7 +383,7 @@ int main(int argc, char** argv)
 {
     int c, i, n;
     char* buf;
-    uid_t uid;
+    const uid_t suid = geteuid();
     int tos = 0;
     HOST_ENTRY* cursor;
     struct optparse optparse_state;
@@ -369,9 +405,9 @@ int main(int argc, char** argv)
     }
 #endif
 
-    if ((uid = getuid())) {
-        /* drop privileges */
-        if (setuid(getuid()) == -1)
+    if (!suid && suid != getuid()) {
+        /* *temporarily* drop privileges */
+        if (seteuid(getuid()) == -1)
             perror("cannot setuid");
     }
 
@@ -656,13 +692,13 @@ int main(int argc, char** argv)
         case 'I':
 #ifdef SO_BINDTODEVICE
             if (socket4 >= 0) {
-                if (setsockopt(socket4, SOL_SOCKET, SO_BINDTODEVICE, optparse_state.optarg, strlen(optparse_state.optarg))) {
+                if (p_setsockopt(suid, socket4, SOL_SOCKET, SO_BINDTODEVICE, optparse_state.optarg, strlen(optparse_state.optarg))) {
                     perror("binding to specific interface (SO_BINTODEVICE)");
                 }
             }
 #ifdef IPV6
             if (socket6 >= 0) {
-                if (setsockopt(socket6, SOL_SOCKET, SO_BINDTODEVICE, optparse_state.optarg, strlen(optparse_state.optarg))) {
+                if (p_setsockopt(suid, socket6, SOL_SOCKET, SO_BINDTODEVICE, optparse_state.optarg, strlen(optparse_state.optarg))) {
                     perror("binding to specific interface (SO_BINTODEVICE), IPV6");
                 }
             }
@@ -710,6 +746,13 @@ int main(int argc, char** argv)
         }
     }
 
+    /* permanetly drop privileges */
+    if (suid != getuid() && setuid(getuid())) {
+	perror("fatal: failed to permanently drop privileges");
+	/* continuing would be a security hole */
+	exit(4);
+    }
+
     /* validate various option settings */
 
 #ifndef IPV6
